name: build

# Controls when the action will run. 
on:
  #pull_request:

  push:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 50

    steps:
    - name: Set env
      run: |
        echo "AZURELOCATION=centralus" >> $GITHUB_ENV
        UNIQUEID="$(date +%s)"
        echo "UNIQUEID=$UNIQUEID" >> $GITHUB_ENV
        echo "BROKERTESTIMAGE=solace/solace-pubsub-standard:latest" >> $GITHUB_ENV
        TESTRESOURCEGROUPNAME="GHTestResourceGroup${UNIQUEID}"
        TESTDEPLOYMENTNAME="GHTestDeployment${UNIQUEID}"
        echo "TESTRESOURCEGROUPNAME=$TESTRESOURCEGROUPNAME" >> $GITHUB_ENV
        echo "TESTDEPLOYMENTNAME=$TESTDEPLOYMENTNAME" >> $GITHUB_ENV
        echo "ADMINPASSWORD=GHAdminpwd1234!" >> $GITHUB_ENV
        echo "TESTRUNBRANCH=${GITHUB_REF##*/}" >> $GITHUB_ENV
        #
        sudo apt-get install jq -y
        sudo apt-get install -y jsonlint

    - name: Checkout
      uses: actions/checkout@v2

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Lint json templates
      run: |
        jsonlint-php nestedtemplates/*

    - name: Setup test params
      run: |
        sed -i "s@ARTIFACTSLOCATION@$GITHUB_REPOSITORY/$TESTRUNBRANCH@g" ci/azuredeploy.parameters.json
        sed -i "s@UNIQUEID@$UNIQUEID@g" ci/azuredeploy.parameters.json
        sed -i "s@TEST_SOLACEDOCKERIMAGE@$BROKERTESTIMAGE@g" ci/azuredeploy.parameters.json
        sed -i "s@ADMINPASSWORD@$ADMINPASSWORD@g" ci/azuredeploy.parameters.json
        sed -i "s@EXPOSURE@Public@g" ci/azuredeploy.parameters.json
        cat ci/azuredeploy.parameters.json

    - name: Test deploy with public LB option
      run: |
        az group create --name $TESTRESOURCEGROUPNAME --location $AZURELOCATION
        echo "Creating publicly exposed cluster and waiting to become active"
        az group deployment create --name $TESTDEPLOYMENTNAME --resource-group $TESTRESOURCEGROUPNAME --template-file azuredeploy.json --parameters ci/azuredeploy.parameters.json
        az group show --name $TESTRESOURCEGROUPNAME | grep provisioningState
        export url=`az network public-ip show --resource-group $TESTRESOURCEGROUPNAME --name myLBPublicIPD --query [ipAddress] --output tsv`; echo $url
        curl -O https://sftp.solace.com/download/SDKPERF_C_LINUX64; tar -xvf SDKPERF_C_LINUX64 -C /tmp; /tmp/pubSubTools/sdkperf_c -cip=$url -mn=100000 -mr=0 -ptl=t1 -stl=t1 | grep "Total Messages"
        sleep 30
        bash -c 'if [[ -z `curl -sS -u admin:$ADMINPASSWORD http://$url:8080/SEMP -d "<rpc><show><config-sync></config-sync></show></rpc>" | grep "<oper-status>Up</oper-status>"` ]] ; then echo "config-sync not up!"; exit 1; fi'
        curl -sS -u admin:$ADMINPASSWORD http://$url:8080/SEMP -d "<rpc><show><redundancy></redundancy></show></rpc>"
        curl -sS -u admin:$ADMINPASSWORD http://$url:8080/SEMP -d "<rpc><show><config-sync></config-sync></show></rpc>"

    - name: Delete test resource group (Cleanup)
      if: ${{ always() }}
      run: |
        az group delete --name $TESTRESOURCEGROUPNAME --yes
